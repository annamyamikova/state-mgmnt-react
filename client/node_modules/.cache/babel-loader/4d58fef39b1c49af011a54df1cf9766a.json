{"ast":null,"code":"var _jsxFileName = \"/Users/annamyamikova/Documents/state-managements/client/src/containers/FormUsernameLogic.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { notification } from 'antd'; // Actions\n\nimport { connectToSocketAction, setUsernameAction } from 'actions/ChatActions'; // Components\n\nimport FormUsername from \"components/FormUsername\";\n\nclass FormUsernameLogic extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.connectionToServer = values => {\n      console.log('Received values of form: ', values.username);\n      axios.get('http://www.geoplugin.net/json.gp').then(res => {\n        const userInfo = {\n          userName: values.username,\n          id: res.data.geoplugin_request,\n          city: res.data.geoplugin_city,\n          country: res.data.geoplugin_countryName,\n          countyCode: res.data.geoplugin_countryCode\n        };\n        this.props.setUsername(userInfo.userName);\n        this.props.setSocket(io(\"http://localhost:4000\"));\n        this.props.socket.on('disconnect', () => {\n          this.props.history.push(\"/\");\n          notification['error']({\n            message: 'Wrong Username!',\n            description: 'User in chat already use this Nickname. Please change the name!',\n            placement: 'topLeft'\n          });\n        });\n        this.props.socket.on('login_success', () => {\n          notification['success']({\n            message: \"Hello, \".concat(this.props.userName, \" :)\"),\n            description: 'You successfully join to the chat! Let\\'s start chatting',\n            placement: 'topLeft'\n          });\n        });\n        this.props.socket.emit('new_user', userInfo);\n        this.props.history.push('/chat');\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.socket !== null) {\n      this.props.socket.disconnect();\n    }\n  }\n\n  render() {\n    return React.createElement(FormUsername, {\n      successValidation: this.connectionToServer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = store => {\n  return {\n    userName: store.chat.userName,\n    socket: store.chat.socket\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUsername: username => dispatch(setUsernameAction(username)),\n    setSocket: socket => dispatch(connectToSocketAction(socket))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormUsernameLogic);","map":{"version":3,"sources":["/Users/annamyamikova/Documents/state-managements/client/src/containers/FormUsernameLogic.js"],"names":["React","Component","axios","connect","io","notification","connectToSocketAction","setUsernameAction","FormUsername","FormUsernameLogic","connectionToServer","values","console","log","username","get","then","res","userInfo","userName","id","data","geoplugin_request","city","geoplugin_city","country","geoplugin_countryName","countyCode","geoplugin_countryCode","props","setUsername","setSocket","socket","on","history","push","message","description","placement","emit","componentDidMount","disconnect","render","mapStateToProps","store","chat","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { notification } from 'antd';\n\n// Actions\nimport { connectToSocketAction, setUsernameAction } from 'actions/ChatActions';\n\n// Components\nimport FormUsername from \"components/FormUsername\";\n\nclass FormUsernameLogic extends Component {\n\n  componentDidMount() {\n    if (this.props.socket !== null) {\n      this.props.socket.disconnect();\n    }\n  }\n\n  connectionToServer = (values) => {\n    console.log('Received values of form: ', values.username);\n    axios.get('http://www.geoplugin.net/json.gp').then(res => {\n      const userInfo = {\n        userName: values.username,\n        id: res.data.geoplugin_request,\n        city: res.data.geoplugin_city,\n        country: res.data.geoplugin_countryName,\n        countyCode: res.data.geoplugin_countryCode,\n      };\n      this.props.setUsername(userInfo.userName);\n      this.props.setSocket(io(\"http://localhost:4000\"));\n\n      this.props.socket.on('disconnect', () => {\n        this.props.history.push(\"/\");\n        notification['error']({\n          message: 'Wrong Username!',\n          description:\n            'User in chat already use this Nickname. Please change the name!',\n          placement: 'topLeft'\n        });\n      });\n\n      this.props.socket.on('login_success', () => {\n        notification['success']({\n          message: `Hello, ${this.props.userName} :)`,\n          description:\n            'You successfully join to the chat! Let\\'s start chatting',\n          placement: 'topLeft',\n        });\n      });\n\n      this.props.socket.emit('new_user', userInfo);\n\n      this.props.history.push('/chat');\n    });\n  };\n\n  render() {\n    return (\n      <FormUsername successValidation={this.connectionToServer}/>\n    )\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    userName: store.chat.userName,\n    socket: store.chat.socket,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUsername: username => dispatch(setUsernameAction(username)),\n    setSocket: socket => dispatch(connectToSocketAction(socket))\n  }\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FormUsernameLogic);"]},"metadata":{},"sourceType":"module"}