{"ast":null,"code":"import _slicedToArray from \"/Users/annamyamikova/Documents/state-managements/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/annamyamikova/Documents/state-managements/client/src/components/ChatRooms.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\";\nimport Room from \"./Room\";\nimport { Tabs } from \"antd\";\nimport { addMsgToRoomAction, addRoomAction, addUsersToRoomAction, clearRooms } from 'actions/ChatActions';\nimport TabModalAction from \"containers/TabModalAction\";\nconst TabPane = Tabs.TabPane;\n\nconst ChatRooms = props => {\n  const _useState = useState(Object.keys(props.rooms)[0]),\n        _useState2 = _slicedToArray(_useState, 2),\n        activeKey = _useState2[0],\n        setActiveKey = _useState2[1];\n\n  useEffect(() => {\n    if (props.socket === null) {\n      props.history.push(\"/\");\n      return;\n    }\n\n    props.socket.on('get_new_msg', msgDate => {\n      if (msgDate != null) {\n        props.addMessageToRoom(msgDate.messages, msgDate.room);\n      }\n    });\n    props.socket.on('rooms', rooms => {\n      if (rooms != null) {\n        props.clearRooms();\n        rooms.forEach(room => {\n          props.addRoom(room);\n        });\n        setActiveKey('public');\n      }\n    });\n    props.socket.emit('get_rooms', props.userName);\n    props.socket.on('get_users_in_room', roomData => {\n      props.addUsersToRoom(roomData.users, roomData.room);\n    });\n  }, []);\n\n  const sendMsg = (values, roomName) => {\n    props.socket.emit('send_new_msg', {\n      msg: values.inputMsg,\n      roomName: roomName\n    });\n  };\n\n  const onChange = activeKey => {\n    setActiveKey(activeKey);\n  };\n\n  const onEdit = (targetKey, action) => {\n    if (action === 'remove') {\n      props.socket.emit('close_room', targetKey);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    hideAdd: true,\n    tabBarExtraContent: React.createElement(TabModalAction, {\n      socket: props.socket,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }),\n    onChange: onChange,\n    activeKey: activeKey,\n    type: \"editable-card\",\n    onEdit: onEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, Object.keys(props.rooms).map(key => React.createElement(TabPane, {\n    tab: key,\n    key: key,\n    closable: key !== 'public',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Room, {\n    messages: props.rooms[key].messages,\n    users: props.rooms[key].users,\n    sendMsg: sendMsg,\n    name: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })))));\n};\n\nconst mapStateToProps = store => {\n  return {\n    userName: store.chat.userName,\n    socket: store.chat.socket,\n    rooms: store.chat.rooms\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addRoom: room => dispatch(addRoomAction(room)),\n    addUsersToRoom: (users, roomName) => dispatch(addUsersToRoomAction(users, roomName)),\n    addMessageToRoom: (msg, roomName) => dispatch(addMsgToRoomAction(msg, roomName)),\n    clearRooms: () => dispatch(clearRooms())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatRooms);","map":{"version":3,"sources":["/Users/annamyamikova/Documents/state-managements/client/src/components/ChatRooms.js"],"names":["React","useEffect","useState","connect","Room","Tabs","addMsgToRoomAction","addRoomAction","addUsersToRoomAction","clearRooms","TabModalAction","TabPane","ChatRooms","props","Object","keys","rooms","activeKey","setActiveKey","socket","history","push","on","msgDate","addMessageToRoom","messages","room","forEach","addRoom","emit","userName","roomData","addUsersToRoom","users","sendMsg","values","roomName","msg","inputMsg","onChange","onEdit","targetKey","action","map","key","mapStateToProps","store","chat","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\";\nimport Room from \"./Room\";\nimport { Tabs } from \"antd\";\nimport {\n  addMsgToRoomAction,\n  addRoomAction,\n  addUsersToRoomAction, clearRooms,\n} from 'actions/ChatActions';\nimport TabModalAction from \"containers/TabModalAction\";\nconst { TabPane } = Tabs;\n\nconst ChatRooms = (props) => {\n  const [activeKey, setActiveKey] = useState(Object.keys(props.rooms)[0]);\n\n  useEffect(() => {\n    if (props.socket === null) {\n      props.history.push(\"/\");\n      return;\n    }\n\n    props.socket.on('get_new_msg', msgDate => {\n      if(msgDate != null){\n        props.addMessageToRoom(msgDate.messages, msgDate.room);\n      }\n    });\n\n    props.socket.on('rooms', rooms => {\n      if(rooms != null) {\n        props.clearRooms();\n        rooms.forEach((room) =>{\n          props.addRoom(room);\n        });\n        setActiveKey('public');\n      }\n    });\n\n    props.socket.emit('get_rooms', props.userName);\n\n    props.socket.on('get_users_in_room', roomData => {\n      props.addUsersToRoom(roomData.users, roomData.room)\n    });\n  },[]);\n\n  const sendMsg = (values, roomName) => {\n    props.socket.emit('send_new_msg', {msg: values.inputMsg, roomName: roomName});\n  };\n\n  const onChange = activeKey => {\n    setActiveKey(activeKey)\n  };\n\n  const onEdit = (targetKey, action) => {\n    if(action === 'remove') {\n      props.socket.emit('close_room', targetKey);\n    }\n  };\n\n  return (\n    <div>\n      <Tabs\n        hideAdd\n        tabBarExtraContent={<TabModalAction socket={props.socket}/>}\n        onChange={onChange}\n        activeKey={activeKey}\n        type=\"editable-card\"\n        onEdit={onEdit}\n      >\n\n        {Object.keys(props.rooms).map(key => (\n          <TabPane tab={key} key={key} closable={key !=='public'} >\n            <Room messages={props.rooms[key].messages} users={props.rooms[key].users} sendMsg={sendMsg} name={key}/>\n          </TabPane>\n        ))}\n      </Tabs>\n\n    </div>\n  )\n};\n\nconst mapStateToProps = store => {\n  return {\n    userName: store.chat.userName,\n    socket: store.chat.socket,\n    rooms: store.chat.rooms\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addRoom: room => dispatch(addRoomAction(room)),\n    addUsersToRoom: (users, roomName) => dispatch(addUsersToRoomAction(users, roomName)),\n    addMessageToRoom: (msg, roomName) => dispatch(addMsgToRoomAction(msg, roomName)),\n    clearRooms: () => dispatch(clearRooms())\n  }\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChatRooms);"]},"metadata":{},"sourceType":"module"}